package vulnerability

import (
	"context"
	"github.com/jmoiron/sqlx"
	"time"
)

type Vulnerability struct {
	ID          int       `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Created     time.Time `json:"created"`
	Updated     time.Time `json:"updated"`
}

type IVulnerabilityRepository interface {
	GetVulnerabilityByField(field, value string) (*Vulnerability, error)
	GetVulnerabilityByID(id int) (*Vulnerability, error)
	GetVulnerabilityByName(name string) (*Vulnerability, error)
	GetVulnerabilityByDescription(description string) (*Vulnerability, error)
	CreateVulnerability(name, description string) (*Vulnerability, error)
	UpdateVulnerability(name, description *string, id int) error
	DeleteVulnerability(id int) error
}

type IVulnerabilityService interface {
	ShowVulnerabilityByID(ctx context.Context, id int) (*Vulnerability, error)
	CreateVulnerability(ctx context.Context, name, description string) (*Vulnerability, error)
	UpdateVulnerability(ctx context.Context, name, description *string, vulnerability *Vulnerability) error
	DeleteVulnerability(ctx context.Context, id int) error
}

type VulnerabilityModule struct {
	IVulnerabilityService
}

func NewVulnerabilityModule(Db *sqlx.DB) *VulnerabilityModule {
	vulnerabilityRepository := NewVulnerabilityRepository(Db)
	return &VulnerabilityModule{
		IVulnerabilityService: NewVulnerabilityService(vulnerabilityRepository),
	}

}
