package vulnerability

import (
	"context"
	"errors"
)

type VulnerabilityService struct {
	Repository IVulnerabilityRepository
}

func NewVulnerabilityService(repository IVulnerabilityRepository) *VulnerabilityService {
	return &VulnerabilityService{Repository: repository}
}

func (v *VulnerabilityService) ShowVulnerabilityByID(ctx context.Context, id int) (*Vulnerability, error) {
	return v.Repository.GetVulnerabilityByID(id)
}

func (v *VulnerabilityService) CreateVulnerability(name, description string) (*Vulnerability, error) {
	return v.Repository.CreateVulnerability(name, description)
}

func (v *VulnerabilityService) UpdateVulnerability(name, description *string, vulnerability *Vulnerability) error {
	didUpdateName := false
	didUpdateDescription := false
	if len(*name) < 1 {
		*name = vulnerability.Name
		didUpdateName = true

	}
	if len(*description) < 1 {
		*description = vulnerability.Description
		didUpdateDescription = true
	}
	if didUpdateName && didUpdateDescription {
		return errors.New("no update done")
	}
	err := v.Repository.UpdateVulnerability(name, description, vulnerability.ID)
	if err != nil {
		return err
	}
	return nil
}

func (v *VulnerabilityService) DeleteVulnerability(ctx context.Context, id int) error {
	return v.Repository.DeleteVulnerability(id)
}
