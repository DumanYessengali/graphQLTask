package vulnerability

import (
	"fmt"
	"github.com/jmoiron/sqlx"
	"strconv"
	"time"
)

type VulnerabilityRepository struct {
	DB *sqlx.DB
}

func NewVulnerabilityRepository(Db *sqlx.DB) *VulnerabilityRepository {
	return &VulnerabilityRepository{DB: Db}
}

func (v *VulnerabilityRepository) GetVulnerabilityByField(field, value string) (*Vulnerability, error) {
	var vulnerability *Vulnerability
	row, err := v.DB.Query(fmt.Sprintf("select*from vulnerability where %v=$1", field), value)
	if err != nil {
		return nil, err
	}

	for row.Next() {
		var v Vulnerability
		err = row.Scan(&v.ID, &v.Name, &v.Description, &v.Created, &v.Updated)

		if err != nil {
			return nil, err
		}

		vulnerability = &v
	}
	return vulnerability, nil
}

func (v *VulnerabilityRepository) GetVulnerabilityByID(id int) (*Vulnerability, error) {
	return v.GetVulnerabilityByField("id", strconv.Itoa(id))
}

func (v *VulnerabilityRepository) GetVulnerabilityByName(name string) (*Vulnerability, error) {
	return v.GetVulnerabilityByField("name", name)
}

func (v *VulnerabilityRepository) GetVulnerabilityByDescription(description string) (*Vulnerability, error) {
	return v.GetVulnerabilityByField("description", description)
}

func (v *VulnerabilityRepository) CreateVulnerability(name, description string) (*Vulnerability, error) {
	rows, err := v.DB.Query("insert into vulnerability(name, description,created, updated) values($1,$2,$3,$4) returning *",
		name, description, time.Now(), time.Now())
	if err != nil {
		return nil, err
	}

	var vuln *Vulnerability
	for rows.Next() {
		var v Vulnerability
		err = rows.Scan(&v.ID, &v.Name, &v.Description, &v.Created, &v.Updated)
		if err != nil {
			return nil, err
		}

		vuln = &v
	}
	return vuln, nil
}

func (v *VulnerabilityRepository) UpdateVulnerability(name, description *string, id int) error {
	_, err := v.DB.Query("update vulnerability set name=$1, description=$2,updated=$3 where id=$4 ",
		name, description, time.Now(), id)
	return err
}

func (v *VulnerabilityRepository) DeleteVulnerability(id int) error {
	query := "Delete from vulnerability where id=$1"
	_, err := v.DB.Exec(query, id)
	if err != nil {
		return err
	}
	return nil
}
